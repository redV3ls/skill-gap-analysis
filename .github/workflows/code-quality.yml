name: Code Quality & Security

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run weekly on Sundays at 3 AM UTC
    - cron: '0 3 * * 0'

jobs:
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for better analysis

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint with SARIF output
        run: |
          npx eslint src/**/*.ts --format @microsoft/eslint-formatter-sarif --output-file eslint-results.sarif
        continue-on-error: true

      - name: Upload ESLint results to GitHub
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: eslint-results.sarif

      - name: Run TypeScript compiler check
        run: npx tsc --noEmit --pretty

      - name: Check for TODO/FIXME comments
        run: |
          echo "Checking for TODO/FIXME comments..."
          grep -r "TODO\|FIXME\|XXX\|HACK" src/ || echo "No TODO/FIXME comments found"

      - name: Check bundle size
        run: |
          npm run build
          echo "Bundle size analysis:"
          du -sh dist/*
          
          # Check if bundle size exceeds threshold (e.g., 1MB)
          size=$(du -s dist/ | cut -f1)
          if [ $size -gt 1024 ]; then
            echo "Warning: Bundle size exceeds 1MB threshold"
          fi

  dependency-analysis:
    name: Dependency Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Analyze dependencies
        run: |
          echo "Dependency analysis:"
          npm ls --depth=0
          
          echo "Outdated packages:"
          npm outdated || true
          
          echo "Unused dependencies check:"
          npx depcheck || true

      - name: Check for duplicate dependencies
        run: |
          echo "Checking for duplicate dependencies..."
          npm ls --depth=0 | grep -E "WARN.*duplicate" || echo "No duplicate dependencies found"

  performance-analysis:
    name: Performance Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build and analyze
        run: |
          npm run build
          
          echo "Build output analysis:"
          ls -la dist/
          
          echo "Checking for source maps:"
          find dist/ -name "*.map" || echo "No source maps found"

      - name: Memory usage analysis
        run: |
          echo "Analyzing memory usage patterns..."
          # Simple check for potential memory leaks in code
          grep -r "setInterval\|setTimeout" src/ | grep -v "clearInterval\|clearTimeout" || echo "No potential memory leaks found"

  documentation-check:
    name: Documentation Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check README
        run: |
          if [ ! -f README.md ]; then
            echo "Error: README.md not found"
            exit 1
          fi
          
          echo "README.md exists and contains:"
          wc -l README.md

      - name: Check API documentation
        run: |
          if [ -d docs/ ]; then
            echo "Documentation directory exists"
            find docs/ -name "*.md" | wc -l
          else
            echo "Warning: No docs directory found"
          fi

      - name: Check for inline documentation
        run: |
          echo "Checking for JSDoc comments..."
          grep -r "\/\*\*" src/ | wc -l || echo "No JSDoc comments found"

  accessibility-check:
    name: Accessibility Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check for accessibility considerations
        run: |
          echo "Checking for accessibility considerations in API responses..."
          
          # Check for proper HTTP status codes
          grep -r "status.*[45][0-9][0-9]" src/ || echo "No error status codes found"
          
          # Check for proper error messages
          grep -r "error.*message" src/ || echo "No error messages found"

  security-headers-check:
    name: Security Headers Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for security headers implementation
        run: |
          echo "Checking for security headers in code..."
          
          # Check for CORS configuration
          grep -r "cors\|CORS" src/ || echo "No CORS configuration found"
          
          # Check for security headers
          grep -r "X-Content-Type-Options\|X-Frame-Options\|X-XSS-Protection" src/ || echo "No security headers found"
          
          # Check for CSP headers
          grep -r "Content-Security-Policy" src/ || echo "No CSP headers found"